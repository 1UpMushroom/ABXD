--- Plugin system modifications ---
I was thinking of a slightly different format when it comes to ABXD plugins, as the current format is lacking metadata, and has some problems with global variables.

1. The structure
The plugins would have their own folder in the /plugins/ directory, laid out like this:
plugins/
	some_plugin/
		plugin.settings - The plugin's settings file, more on that later.
		[hook].php - PHP file(s) with the name of the hook, example footers.php will be used for the footers bucket, and BBCodes.php will be used for the BBCodes bucket, etc.
		Dependencies of the plugin, like .css files for it would also go here.
	
This directory structure would also make the plugins folder less of a mess when you have a lot of plugins - which each have their dependencies.

2. The plugin.settings file
The plugin.settings file would be a simple setting=value structure, example:
name=My plugin
description=Example

There would be the following settings:
	Mandetory:
		name: The plugin's name
	optional:
		description: A description of the plugin
		author: The username of the author

3. How things are done
When the plugin system is loaded, it will either load the plugin library file (perhaps /plugins/library); which would be a pre-built file conteining serialized arrays of each of the plugins in the folders, it would contain its name, directory, which buckets it uses, and all the other specified data.
Or, if the setting is set to do so, it will scan through the directory and build those arrays, which would obviously be slower, but wouldn't require a rebuild when you install or remove a plugin.

When a runBucket(); call is done, it will include() the [bucket].php file in the plugin's directory (which would get rid of global variable issues, and teh need to make a function in the files).
